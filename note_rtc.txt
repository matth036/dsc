Commentary on code found in TimeStamp/main.c


The usuall turn it on command. 
  /* Enable the PWR clock */
This function is in stm32f4xx_rcc.c
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);


  /* Allow access to RTC */
This function is in stm32f4xx_pwr.c
  PWR_BackupAccessCmd(ENABLE);


  /* Enable the LSE OSC */
Funtion in stm32f4xx_rcc.c
  RCC_LSEConfig(RCC_LSE_ON);

  /* Wait till LSE is ready */
Funtion in stm32f4xx_rcc.c
  while(RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
  {
  }

  /* Select the RTC Clock Source */
Function in stm32f4xx_rcc.c
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);

(1 + 0xFF) == 256
(1 + 0x7F) == 128
32768/256/128 == 1
So, This is a 1 second clock tick.
  SynchPrediv = 0xFF;
  AsynchPrediv = 0x7F;

The stopwatch example uses:
  RTC_InitStructure.RTC_AsynchPrediv = 0x1F;   // (1 + 0x1F) == 32
  RTC_InitStructure.RTC_SynchPrediv  = 0x3FF;  // (1 + 0x3FF) == 1024


  /* Enable the RTC Clock */
  RCC_RTCCLKCmd(ENABLE);

  /* Wait for RTC APB registers synchronisation */
  RTC_WaitForSynchro();

  /* Enable The TimeStamp */
  RTC_TimeStampCmd(RTC_TimeStampEdge_Falling, ENABLE);





